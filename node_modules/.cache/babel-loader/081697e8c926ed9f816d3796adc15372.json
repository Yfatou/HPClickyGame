{"ast":null,"code":"import _classCallCheck from \"/Users/yayefatouthiam/Working/HPClickyGame/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/yayefatouthiam/Working/HPClickyGame/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/yayefatouthiam/Working/HPClickyGame/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/yayefatouthiam/Working/HPClickyGame/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/yayefatouthiam/Working/HPClickyGame/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/yayefatouthiam/Working/HPClickyGame/client/src/App.js\";\nimport React, { Component } from \"react\";\nimport FriendCard from \"./components/FriendCard\";\nimport Wrapper from \"./components/Wrapper\";\nimport NavBar from \"./components/NavBar\";\nimport friends from \"./friends.json\";\nimport Jumbotron from \"./components/Jumbotron\";\nimport \"./index.css\"; // Variable intitialization\n\nvar score = 0;\nvar topscore = 0;\nvar message = \" Click an image to begin! \";\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      friends: friends,\n      topscore: topscore,\n      score: score,\n      message: message\n    };\n\n    _this.schuffleFriend = function (id) {\n      // Filter this.state.friends for friends with an id equal to the id of the card being clicked\n      var friends = _this.state.friends;\n      var cardClicked = friends.filter(function (friend) {\n        return friend.id === id;\n      });\n      console.log(friends);\n\n      if (!cardClicked[0].clicked) {\n        // If the clicked card hasn't been clicked\n        console.log(\"if: \" + cardClicked[0].clicked);\n        cardClicked[0].clicked = true; // The clicked value of the card is now at true\n\n        score++; // The score is incremented\n\n        message = \" You guessed correctly \"; // If the player score is higher than the previous topscore\n\n        if (score > topscore) {\n          topscore = score; // The new topscore is the score\n\n          _this.setState({\n            score: score,\n            topscore: topscore\n          });\n        }\n\n        if (topscore === 12) {\n          // All the card have been clicked once\n          message = \" YAY, You won!! Click a card to play again! \";\n        } // Shuffle the cards\n\n\n        friends.sort(function () {\n          return Math.random() - 0.5;\n        });\n\n        _this.setState({\n          friends: friends,\n          score: score,\n          message: message\n        });\n      } else {\n        // If a card is already clicked => clicked = true\n        // the score is reinitialized\n        console.log(\"else: \" + cardClicked[0].clicked);\n        score = 0;\n        message = \" You guessed incorrectly - Click again to start over! \"; //the clicked value of all the cards is reinitialized to false\n\n        for (var i = 0; i < friends.length; i++) {\n          friends[i].clicked = false;\n        }\n\n        _this.setState({\n          friends: friends,\n          score: score,\n          message: message\n        });\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        className: \"test\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }, React.createElement(NavBar, {\n        score: this.state.score,\n        topscore: this.state.topscore,\n        message: this.state.message,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }), React.createElement(Jumbotron, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }), React.createElement(Wrapper, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }, this.state.friends.map(function (friend) {\n        return React.createElement(FriendCard, {\n          schuffleFriend: _this2.schuffleFriend,\n          id: friend.id,\n          key: friend.id,\n          image: friend.image,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 80\n          },\n          __self: this\n        });\n      })));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/yayefatouthiam/Working/HPClickyGame/client/src/App.js"],"names":["React","Component","FriendCard","Wrapper","NavBar","friends","Jumbotron","score","topscore","message","App","state","schuffleFriend","id","cardClicked","filter","friend","console","log","clicked","setState","sort","Math","random","i","length","map","image"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport FriendCard from \"./components/FriendCard\";\nimport Wrapper from \"./components/Wrapper\";\nimport NavBar from \"./components/NavBar\";\nimport friends from \"./friends.json\";\nimport Jumbotron from \"./components/Jumbotron\";\nimport \"./index.css\";\n\n// Variable intitialization\nlet score = 0;\nlet topscore = 0;\nlet message = \" Click an image to begin! \";\n\nclass App extends Component {\n  // Setting this.state.friends to the friends json array\n  state = {\n    friends,\n    topscore,\n    score,\n    message\n  };\n\n\n  //On click event \n  schuffleFriend = id => {\n    \n    // Filter this.state.friends for friends with an id equal to the id of the card being clicked\n    const friends = this.state.friends;\n    const cardClicked = friends.filter(friend => friend.id === id);\n    console.log(friends);\n    \n    if (! cardClicked[0].clicked) { // If the clicked card hasn't been clicked\n      console.log(\"if: \" + cardClicked[0].clicked);\n      cardClicked[0].clicked = true; // The clicked value of the card is now at true\n      score++; // The score is incremented\n      message = \" You guessed correctly \";\n\n      // If the player score is higher than the previous topscore\n      if (score > topscore) {\n        topscore = score; // The new topscore is the score\n        this.setState({score, topscore })\n      }\n\n      if (topscore === 12) { // All the card have been clicked once\n        message = \" YAY, You won!! Click a card to play again! \";\n      }\n\n      // Shuffle the cards\n      friends.sort(() => Math.random() - 0.5);\n      \n      this.setState({ friends, score, message });\n    }\n    else { // If a card is already clicked => clicked = true\n      // the score is reinitialized\n      console.log(\"else: \" + cardClicked[0].clicked);\n      score = 0;\n      message = \" You guessed incorrectly - Click again to start over! \";\n\n      //the clicked value of all the cards is reinitialized to false\n      for (let i = 0; i < friends.length; i++) {\n\t\t\t\tfriends[i].clicked = false;\n      }\n\n      this.setState({ friends, score, message });\n    }\n  };\n\n  \n  render() {\n    return (\n      <div className=\"test\">\n        <NavBar \n          score={this.state.score}\n          topscore={this.state.topscore}\n          message={this.state.message}\n        />\n        <Jumbotron />\n        <Wrapper>\n          {this.state.friends.map(friend => (\n            <FriendCard\n              schuffleFriend={this.schuffleFriend}\n              id={friend.id}\n              key={friend.id}\n              image={friend.image}\n            />\n          ))}\n      </Wrapper>\n      </div>\n    );\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}